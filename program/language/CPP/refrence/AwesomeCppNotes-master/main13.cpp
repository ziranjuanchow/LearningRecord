


#include <iostream>

using namespace std;

/*********************************************************************************************************************************************

                                                            C++ 友元
    在C++中，我们使用类对数据进行了隐藏和封装，类的数据成员一般都定义为私有成员，成员函数一般都定义为公有的，以此提供类与外界的通讯接口；
    但是，有时需要定义一些函数，这些函数不是类的一部分，但又需要频繁地访问类的数据成员，这时可以将这些函数定义为该函数的友元函数；
    除了友元函数外，还有友元类，两者统称为友元。友元类的所有成员函数都是另一个类的友元函数，都可以访问另一个类中的隐藏信息（包括私有成员和保护成员）；
    友元的作用是提高了程序的运行效率（即减少了类型检查和安全性检查等都需要时间开销），但它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员

    1. 友元函数
    2. 友元类

**********************************************************************************************************************************************/

class B
{
public:
    B(int x)
    {
        bx = x;
    }
    friend class A;  //声明A是B的友元类，那么A的所有成员函数都是B的友元函数，都可以访问另一个类中的隐藏信息
private:
    int bx;
};

class A
{
public:
    A(int x)
    {
        ax = x;
    }
    int addSum(A a, B b) //因为A是B的友元类，所以A的成员函数才可以访问B私有变量
    {
        return (a.ax + b.bx);
    }
private:
    int ax;
};



int main()
{
    A a(5);
    B b(3);

    cout << "A为B的友元类时 : A.ax + B.bx = " << a.addSum(a, b) << endl;

    return 0;
}
